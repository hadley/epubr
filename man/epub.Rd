% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epubr.R
\name{epub}
\alias{epub}
\alias{epub_unzip}
\title{Extract and read EPUB e-books}
\usage{
epub(file, fields = NULL, drop_sections = NULL, chapter_pattern = NULL,
  ...)

epub_unzip(file, exdir = tempdir())
}
\arguments{
\item{file}{character, input EPUB filename. May be a vector for \code{epub}. Always a single file for \code{epub_unzip}.}

\item{fields}{character, vector of metadata fields (data frame columns) to parse from metadata, if they exist. See details.}

\item{drop_sections}{character, a regular expression pattern string to identify text sections (rows of nested text data frame) to drop.}

\item{chapter_pattern}{character, a regular expression pattern string to attempt distinguishing nested data frame rows of chapter text entries from other types of entries.}

\item{...}{additional arguments. Currently unsupported.}

\item{exdir}{character, extraction directory to place archive contents (files).}
}
\value{
\code{epub} returns a data frame. \code{epub_unzip} returns nothing but extracts files from an epub file archive.
}
\description{
Read EPUB format e-books into a data frame using \code{epub} or extract epub archive files for direct use with \code{epub_unzip}.
}
\details{
The primary function here is \code{epub}. It parses EPUB file metadata and textual content into a data frame.
The output data frame has one row for each file in \code{file}.
It has metadata in all columns except the \code{data} column, which is a nested column containing a data frame of the e-book text.
Both the primary and nested data frames are tibbles and safe to print to the console "as is".

Be careful if \code{file} is a long vector of many EPUB files.
This could take a long time to process as well as could potentially use up all of your system RAM if you have far too many large books in one call to \code{epub}.

The \code{fields} argument can be used to limit the columns returned. E.g., \code{fields = c("title", "creator", "date", "identifier", "publisher")}. Some fields will be returned even if not in \code{fields}.
You should already know what metadata fields are in the EPUB file.

The \code{chapter_pattern} argument may be helpful for bulk processing of similarly formatted EPUB files. This should be ignored for poorly formatted EPUB files or where there is inconsistent naming across an e-book collection.
Like with \code{fields}, you should explore file metadata in advance or this argument will not be useful. If provided, a column \code{nchap} is added to the output data frame giving the guessed number of chapters.
The \code{section} column will also be updated to reflect guessed chapters with new, consistent chapter IDs.

If using \code{epub_unzip} directly on individual EPUB files, this gives you control over where to extract archive files to and what to do with them subsequently.
\code{epub} uses \code{epub_unzip} internally to extract EPUB archive files to the R session temp directory (with \code{tempdir()}).
}
\examples{
file <- system.file("dracula.epub", package = "epubr")
epub_unzip(file) # unzip to directly inspect archive files
list.files(file.path(tempdir(), "OEBPS"))

x <- epub(file)
x
x$data[[1]]

x <- epub(file, fields = c("title", "creator"), drop_sections = "^cov")
x
x$data[[1]]
}
